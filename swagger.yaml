swagger: '2.0'

info:
  version: '1.0.0'
  title: 'Users Microservice'
  description: 'Microservice for creating, updating, and authorizing users.'
  contact:
    name: Jarrod Parkes
    email: jarrod@udacity.com
    url: http://jarrodparkes.com
  license:
    name: MIT License

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /users:
    get:
      description: List users.
      summary: List users.
      parameters:
       - name: page_size
         in: query
         description: Number of users returned. Limit is 50.
         type: integer
       - name: page_number
         in: query
         description: Page number.
         type: integer  
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Profile'
        401:
          $ref: "#/responses/Unauthorized" 
  /users/search:
    get:
      description: List and filter users.
      summary: List and filter users.
      parameters:
       - name: page_size
         in: query
         description: Number of users returned. Limit is 50.
         type: integer
       - name: page_number
         in: query
         description: Page number.
         type: integer  
       - name: filter
         in: body
         description: Properties for filtering search.
         schema:
           type: object
           properties:
            id:
              type: array
              description: IDs of users to filter.
              items:
                type: string
                default: "3"
           required:
              - id 
      responses:
        200:
          description: Successful response.
          schema:
            type: array
            items:
              $ref: '#/definitions/Profile'
        401:
          $ref: "#/responses/Unauthorized"   
  /users/{id}:
    get:
      description: Get information about a user.
      summary: Get information about a user.
      parameters:
        - name: id
          in: path
          description: ID of user to fetch.
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/Profile'
        401:
          $ref: "#/responses/Unauthorized" 
  /users/login:
    post:
      description: Login and create an encoded JWT.
      summary: Login and create an encoded JWT.
      parameters:
       - name: code
         in: query
         description: Facebook authorization code.
         type: string
         pattern: '^(\w{280})$'
      responses:
        200:
          description: Login successful.
          schema:
            $ref: '#/definitions/Access'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Message'
  /users/profile:
    get:
      description: Get information about the current user.
      summary: Get information about the current user.
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/Profile'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Message'
      security:
      - JWT: []
    put:
      description: Update information for the current user.
      summary: Update information for the current user.
      parameters:
        - name: profile
          in: body
          description: Data to update current user.
          required: true
          schema:
            $ref: '#/definitions/UpdateProfile'
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/Message'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Message'   
      security:
      - JWT: []             
  /users/favorites:
    put:
      description: Update the current user's favorite activities.
      summary: Update the current user's favorite activities.
      parameters:
        - in: body
          name: favorites
          description: Activities to add or remove from favorites.
          required: true
          schema:
            $ref: '#/definitions/UpdateFavorite'
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/Message'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Message'
      security:
      - JWT: []
  /users/logout:
    post:
      description: Logout and invalidate the provided JWT.
      summary: Logout and invalidate the provided JWT.
      responses:
        200:
          description: Logout successful.
          schema:
            $ref: '#/definitions/Message'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Message'
      security:
      - JWT: []      

responses:
  NoContent:
    description: The request was fulfilled, but nothing to return.
  BadRequest:
    description: Invalid request.
  NotModified:
    description: The specified resource was not modified.
  NotFound:
    description: The specified resource was not found.
  Unauthorized:
    description: Unauthorized.

securityDefinitions:
  JWT:
    type: apiKey
    description: A Base64-encoded JSON web token.
    name: "Authorization: Bearer"
    in: header

definitions:
  Profile:
    allOf:
      - $ref: '#/definitions/UpdateProfile'
      - required:
        - id
        - favorite_activities
        - created_at
        - updated_at
        properties:
          id:
            type: string
            description: ID of user.
            readOnly: true
            default: "1"
          favorite_activities:
            type: array
            items:
              type: string
              description: ID of activity.
              default: "4"
          created_at:
            type: string
            description: Date event was created.
            format: YYYY-mm-dd HH:mm:ss
            default: "2017-07-24 20:43:51"
          updated_at:
            type: string
            description: Date event was created.
            format: YYYY-mm-dd HH:mm:ss
            default: "2017-07-24 20:43:51"
  UpdateProfile:
    type: object
    properties:
      name:
        type: string
        description: User's full name.
        default: "Julian Doe"
      photo_url:
        type: string
        description: URL to user's profile image.
        default: "https://example.net"
      location:
        type: string
        description: User's location.
        default: "San Francisco, CA"
    required:
      - name
      - photo_url
      - location
  UpdateFavorite:
    type: object
    properties:
      add:
        type: array
        items:
          type: string
          description: IDs of activity to favorite.
          default: "4"
      remove:
        type: array
        items:
          type: string
          description: IDs of activity to remove from favorites.
          default: "5"
    required:
      - add
      - remove
  Message:
    type: object
    properties:
      message:
        type: string
        description: A message.
    required:
      - message
    example:
      message: "A message describing the HTTP status code."
  Access:
    type: object
    properties:
      id:
        type: string
        description: User id.
        pattern: '^(\d{15})$'
      jwt:
        type: string
        description: A base64 encoded JWT.
        pattern: '^(\w{100})$'
    required:
      - id
      - token